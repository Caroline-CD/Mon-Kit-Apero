import { isVue3 } from "vue-demi";
import { isArray, isString } from "@intlify/shared";
import { findBrowserLocale, getLocalesRegex } from "vue-i18n-routing";
import JsCookie from "js-cookie";
import { parse, serialize } from "cookie-es";
import { nuxtI18nOptionsDefault, nuxtI18nInternalOptions } from "#build/i18n.options.mjs";
import { isClient, isServer, isStatic } from "#build/i18n.utils.mjs";
export function parseAcceptLanguage(input) {
  return input.split(",").map((tag) => tag.split(";")[0]);
}
export function getBrowserLocale(options, context) {
  let ret;
  if (isClient()) {
    if (navigator.languages) {
      ret = findBrowserLocale(options.__normalizedLocales, navigator.languages);
    }
  } else if (isServer()) {
    if (!isVue3) {
      if (context.req && typeof context.req.headers["accept-language"] !== "undefined") {
        ret = findBrowserLocale(options.__normalizedLocales, parseAcceptLanguage(context.req.headers["accept-language"]));
      }
    } else {
      throw new Error("Not implement for nuxt3 options API style");
    }
  }
  return ret;
}
export function getLocaleCookie(context, {
  useCookie = nuxtI18nOptionsDefault.detectBrowserLanguage.useCookie,
  cookieKey = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieKey,
  localeCodes = []
} = {}) {
  if (useCookie) {
    let localeCode;
    if (isClient()) {
      localeCode = JsCookie.get(cookieKey);
    } else if (isServer()) {
      if (context.req && typeof context.req.headers.cookie !== "undefined") {
        const cookies = context.req.headers && context.req.headers.cookie ? parse(context.req.headers.cookie) : {};
        localeCode = cookies[cookieKey];
      } else {
        throw new Error("server request unexpected error");
      }
    }
    if (localeCode && localeCodes.includes(localeCode)) {
      return localeCode;
    }
  }
}
export function setLocaleCookie(locale, context, {
  useCookie = nuxtI18nOptionsDefault.detectBrowserLanguage.useCookie,
  cookieKey = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieKey,
  cookieDomain = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieDomain,
  cookieSecure = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieSecure,
  cookieCrossOrigin = nuxtI18nOptionsDefault.detectBrowserLanguage.cookieCrossOrigin
} = {}) {
  if (!useCookie) {
    return;
  }
  const date = new Date();
  const cookieOptions = {
    expires: new Date(date.setDate(date.getDate() + 365)),
    path: "/",
    sameSite: cookieCrossOrigin ? "none" : "lax",
    secure: cookieCrossOrigin || cookieSecure
  };
  if (cookieDomain) {
    cookieOptions.domain = cookieDomain;
  }
  if (isClient()) {
    JsCookie.set(cookieKey, locale, cookieOptions);
  } else if (isServer()) {
    if (!isVue3 && context.res) {
      const { res } = context;
      let headers = res.getHeader("Set-Cookie") || [];
      if (!isArray(headers)) {
        headers = [String(headers)];
      }
      const redirectCookie = serialize(cookieKey, locale, cookieOptions);
      headers.push(redirectCookie);
      res.setHeader("Set-Cookie", headers);
    } else {
      throw new Error("Not implement for nuxt3 options API style");
    }
  }
}
export function getInitialLocale(context, route, nuxtI18nOptions, localeCodes, routeLocaleGetter, locale = "") {
  const { strategy, defaultLocale, vueI18n } = nuxtI18nOptions;
  const initialLocale = locale || vueI18n.locale || "en-US";
  const browserLocale = nuxtI18nOptions.detectBrowserLanguage ? detectBrowserLanguage(route, context, nuxtI18nOptions, nuxtI18nInternalOptions, localeCodes, initialLocale) : "";
  console.log("getInitialLocale strategy:", strategy);
  console.log("getInitialLocale browserLocale:", browserLocale);
  console.log("getInitialLocale initialLocale:", initialLocale);
  let finalLocale = browserLocale;
  if (!finalLocale) {
    if (strategy !== "no_prefix") {
      finalLocale = routeLocaleGetter(route);
      console.log("getInitialLocale routeLocale:", finalLocale);
    }
  }
  if (!finalLocale && nuxtI18nOptions.detectBrowserLanguage && nuxtI18nOptions.detectBrowserLanguage.useCookie) {
    finalLocale = getLocaleCookie(context, { ...nuxtI18nOptions, localeCodes });
    console.log("getInitialLocale cookieLocale:", finalLocale);
  }
  if (!finalLocale) {
    finalLocale = defaultLocale || "";
  }
  return finalLocale;
}
export function detectBrowserLanguage(route, context, nuxtI18nOptions, nuxtI18nInternalOptions2, localeCodes = [], locale = "") {
  if (isStatic()) {
    return "";
  }
  const { strategy } = nuxtI18nOptions;
  const { redirectOn, alwaysRedirect, useCookie, fallbackLocale } = nuxtI18nOptions.detectBrowserLanguage;
  console.log("detectBrowserLanguage", route, localeCodes, locale, strategy, redirectOn, alwaysRedirect, useCookie, fallbackLocale);
  const path = isString(route) ? route : route.path;
  if (strategy !== "no_prefix") {
    if (redirectOn === "root") {
      if (path !== "/") {
        return "";
      }
    } else if (redirectOn === "no prefix") {
      if (!alwaysRedirect && path.match(getLocalesRegex(localeCodes))) {
        return "";
      }
    }
  }
  const cookieLocale = getLocaleCookie(context, { ...nuxtI18nOptions, localeCodes });
  console.log("detectBrowserLanguage: cookieLocale", cookieLocale);
  let matchedLocale = cookieLocale;
  if (!useCookie) {
    matchedLocale = getBrowserLocale(nuxtI18nInternalOptions2, context);
    console.log("detectBrowserLanguage: getBrowserLocale", matchedLocale);
  }
  const finalLocale = matchedLocale || fallbackLocale;
  const vueI18nLocale = locale || nuxtI18nOptions.vueI18n.locale;
  if (finalLocale && (!useCookie || alwaysRedirect || !cookieLocale)) {
    if (finalLocale !== vueI18nLocale) {
      return finalLocale;
    }
  }
  return "";
}
