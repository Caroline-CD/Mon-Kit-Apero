import { createLocaleFromRouteGetter } from 'vue-i18n-routing';
import type { Locale } from '@intlify/vue-i18n-bridge';
import type { Route, RouteLocationNormalized, RouteLocationNormalizedLoaded } from 'vue-i18n-routing';
import type { DeepRequired } from 'ts-essentials';
import type { NuxtI18nOptions, NuxtI18nInternalOptions, DetectBrowserLanguageOptions } from '#build/i18n.options.mjs';
/**
 * Parses locales provided from browser through `accept-language` header.
 *
 * @param input - Accept-Language header value.
 * @return An array of locale codes. Priority determined by order in array.
 */
export declare function parseAcceptLanguage(input: string): string[];
export declare function getBrowserLocale(options: Required<NuxtI18nInternalOptions>, context?: any): string | undefined;
export declare function getLocaleCookie(context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
{ useCookie, cookieKey, localeCodes }?: Pick<DetectBrowserLanguageOptions, 'useCookie' | 'cookieKey'> & {
    localeCodes?: readonly string[];
}): string | undefined;
export declare function setLocaleCookie(locale: string, context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
{ useCookie, cookieKey, cookieDomain, cookieSecure, cookieCrossOrigin }?: Pick<DetectBrowserLanguageOptions, 'useCookie' | 'cookieDomain' | 'cookieKey' | 'cookieSecure' | 'cookieCrossOrigin'>): void;
export declare function getInitialLocale(context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
route: string | Route | RouteLocationNormalized, nuxtI18nOptions: DeepRequired<NuxtI18nOptions>, localeCodes: string[], routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>, locale?: string): string;
export declare function detectBrowserLanguage(route: string | Route | RouteLocationNormalized | RouteLocationNormalizedLoaded, context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
nuxtI18nOptions: DeepRequired<NuxtI18nOptions>, nuxtI18nInternalOptions: DeepRequired<NuxtI18nInternalOptions>, localeCodes?: string[], locale?: Locale): string;
