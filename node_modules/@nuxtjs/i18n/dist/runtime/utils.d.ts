import { createLocaleFromRouteGetter } from 'vue-i18n-routing';
import type { Route, RouteLocationNormalized, RouteLocationNormalizedLoaded } from 'vue-i18n-routing';
import type { I18n, VueI18n, Locale } from '@intlify/vue-i18n-bridge';
import type { NuxtI18nOptions } from '#build/i18n.options.mjs';
import type { DeepRequired } from 'ts-essentials';
import { DetectBrowserLanguageOptions } from '../types';
export declare function isServer(): boolean;
export declare function isClient(): boolean;
export declare function isStatic(): boolean;
export declare function isLegacyVueI18n(target: any): target is VueI18n;
export declare function setCookieLocale(i18n: I18n, locale: Locale): any;
export declare function loadAndSetLocale(newLocale: string, context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
i18n: I18n, { useCookie, initial }?: Pick<DetectBrowserLanguageOptions, 'useCookie'> & {
    initial?: boolean;
}): boolean;
export declare function detectLocale(route: string | Route | RouteLocationNormalized | RouteLocationNormalizedLoaded, context: any, // eslint-disable-line @typescript-eslint/no-explicit-any
i18n: I18n, routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>, nuxtI18nOptions: DeepRequired<NuxtI18nOptions>, localeCodes?: string[]): string;
export declare function detectRedirect(route: string | Route | RouteLocationNormalized | RouteLocationNormalizedLoaded, app: any, // TODO: should resolve type!
targetLocale: Locale, routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>, nuxtI18nOptions: DeepRequired<NuxtI18nOptions>): string;
export declare function proxyNuxt(context: any, target: Function): () => any;
