import Vue from "vue";
import { ref, computed } from "vue-demi";
import VueI18n from "vue-i18n";
import { createI18n } from "@intlify/vue-i18n-bridge";
import {
  createLocaleFromRouteGetter,
  extendI18n,
  registerGlobalOptions,
  getRouteBaseName,
  localePath,
  localeLocation,
  localeRoute,
  switchLocalePath,
  localeHead
} from "vue-i18n-routing";
import { isEmptyObject } from "@intlify/shared";
import { castToVueI18n } from "@intlify/vue-i18n-bridge";
import { defineNuxtPlugin, useRouter, addRouteMiddleware, navigateTo } from "#app";
import { loadMessages, localeCodes, resolveNuxtI18nOptions, nuxtI18nInternalOptions } from "#build/i18n.options.mjs";
import { loadAndSetLocale, detectLocale, detectRedirect, proxyNuxt, isClient } from "#build/i18n.utils.mjs";
import {
  getInitialLocale,
  getBrowserLocale as _getBrowserLocale,
  getLocaleCookie as _getLocaleCookie,
  setLocaleCookie as _setLocaleCookie
} from "#build/i18n.internal.mjs";
export default defineNuxtPlugin(async (nuxt) => {
  const router = useRouter();
  const legacyNuxtContext = nuxt.nuxt2Context;
  const { app } = legacyNuxtContext;
  const nuxtI18nOptions = await resolveNuxtI18nOptions(nuxt);
  const useCookie = nuxtI18nOptions.detectBrowserLanguage && nuxtI18nOptions.detectBrowserLanguage.useCookie;
  const getLocaleFromRoute = createLocaleFromRouteGetter(localeCodes, nuxtI18nOptions.routesNameSeparator, nuxtI18nOptions.defaultLocaleRouteNameSuffix);
  const vueI18nOptions = nuxtI18nOptions.vueI18n;
  registerGlobalOptions(router, nuxtI18nOptions);
  const messages = await loadMessages();
  if (!isEmptyObject(messages)) {
    vueI18nOptions.messages = messages;
  }
  const initialLocale = getInitialLocale(nuxt.ssrContext, isClient() ? router.currentRoute : nuxt.ssrContext.url, nuxtI18nOptions, localeCodes, getLocaleFromRoute);
  console.log("initial locale", initialLocale);
  Vue.use(VueI18n, { bridge: true });
  const i18n = createI18n({
    ...vueI18nOptions,
    locale: initialLocale
  }, VueI18n);
  let notInitialSetup = true;
  function isInitialLocaleSetup(locale) {
    return initialLocale !== locale && notInitialSetup;
  }
  extendI18n(i18n, {
    locales: nuxtI18nOptions.locales,
    localeCodes,
    baseUrl: nuxtI18nOptions.baseUrl,
    hooks: {
      onExtendComposer(composer) {
        const _localeProperties = ref(nuxtI18nInternalOptions.__normalizedLocales.find((l) => l.code === composer.locale.value) || {
          code: composer.locale.value
        });
        composer.localeProperties = computed(() => _localeProperties.value);
        composer.setLocale = (locale) => {
          const localeSetup = isInitialLocaleSetup(locale);
          const modified = loadAndSetLocale(locale, legacyNuxtContext, i18n, { useCookie, initial: localeSetup });
          if (modified && localeSetup) {
            notInitialSetup = false;
          }
          const redirectPath = detectRedirect(locale, app, initialLocale, getLocaleFromRoute, nuxtI18nOptions);
          if (redirectPath) {
            navigate(nuxt.ssrContext, redirectPath);
          }
        };
        composer.getBrowserLocale = () => _getBrowserLocale(nuxtI18nInternalOptions, nuxt.ssrContext);
        composer.getLocaleCookie = () => _getLocaleCookie(nuxt.ssrContext, { ...nuxtI18nOptions.detectBrowserLanguage, localeCodes });
        composer.setLocaleCookie = (locale) => _setLocaleCookie(locale, nuxt.ssrContext, nuxtI18nOptions.detectBrowserLanguage || void 0);
        composer.onBeforeLanguageSwitch = nuxtI18nOptions.onBeforeLanguageSwitch;
        composer.onLanguageSwitched = nuxtI18nOptions.onLanguageSwitched;
      },
      onExtendExportedGlobal(global) {
        return {
          localeProperties: {
            get() {
              return global.localeProperties.value;
            }
          },
          getBrowserLocale: {
            get() {
              return () => Reflect.apply(global.getBrowserLocale, global, []);
            }
          },
          getLocaleCookie: {
            get() {
              return () => Reflect.apply(global.getLocaleCookie, global, []);
            }
          },
          setLocaleCookie: {
            get() {
              return (locale) => Reflect.apply(global.setLocaleCookie, global, [locale]);
            }
          },
          onBeforeLanguageSwitch: {
            get() {
              return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(global.onBeforeLanguageSwitch, global, [oldLocale, newLocale, initialSetup, context]);
            }
          },
          onLanguageSwitched: {
            get() {
              return (oldLocale, newLocale) => Reflect.apply(global.onLanguageSwitched, global, [oldLocale, newLocale]);
            }
          }
        };
      },
      onExtendVueI18n(composer) {
        return {
          localeProperties: {
            get() {
              return composer.localeProperties.value;
            }
          },
          getBrowserLocale: {
            get() {
              return () => Reflect.apply(composer.getBrowserLocale, composer, []);
            }
          },
          getLocaleCookie: {
            get() {
              return () => Reflect.apply(composer.getLocaleCookie, composer, []);
            }
          },
          setLocaleCookie: {
            get() {
              return (locale) => Reflect.apply(composer.setLocaleCookie, composer, [locale]);
            }
          },
          onBeforeLanguageSwitch: {
            get() {
              return (oldLocale, newLocale, initialSetup, context) => Reflect.apply(composer.onBeforeLanguageSwitch, composer, [oldLocale, newLocale, initialSetup, context]);
            }
          },
          onLanguageSwitched: {
            get() {
              return (oldLocale, newLocale) => Reflect.apply(composer.onLanguageSwitched, composer, [oldLocale, newLocale]);
            }
          }
        };
      }
    }
  });
  Vue.use(castToVueI18n(i18n));
  if (legacyNuxtContext) {
    const { store } = legacyNuxtContext;
    legacyNuxtContext.i18n = i18n.global;
    app.i18n = i18n.global;
    app.getRouteBaseName = legacyNuxtContext.getRouteBaseName = proxyNuxt(legacyNuxtContext, getRouteBaseName);
    app.localePath = legacyNuxtContext.localePath = proxyNuxt(legacyNuxtContext, localePath);
    app.localeRoute = legacyNuxtContext.localeRoute = proxyNuxt(legacyNuxtContext, localeRoute);
    app.localeLocation = legacyNuxtContext.localeLocation = proxyNuxt(legacyNuxtContext, localeLocation);
    app.switchLocalePath = legacyNuxtContext.switchLocalePath = proxyNuxt(legacyNuxtContext, switchLocalePath);
    app.localeHead = legacyNuxtContext.localeHead = proxyNuxt(legacyNuxtContext, localeHead);
    if (store) {
    }
  }
  nuxt.provide("nuxtI18nHead", function() {
    return Reflect.apply(localeHead, {
      getRouteBaseName: this.getRouteBaseName,
      localePath: this.localePath,
      localeRoute: this.localeRoute,
      localeLocation: this.localeLocation,
      resolveRoute: this.resolveRoute,
      switchLocalePath: this.switchLocalePath,
      localeHead: this.localeHead,
      i18n: this.$i18n,
      route: this.$route,
      router: this.$router
    }, arguments);
  });
  if (isClient()) {
    addRouteMiddleware("locale-changing", async (to, from) => {
      const locale = detectLocale(to, nuxt.ssrContext, i18n, getLocaleFromRoute, nuxtI18nOptions, localeCodes);
      console.log("detectlocale client return", locale);
      const localeSetup = isInitialLocaleSetup(locale);
      const modified = loadAndSetLocale(locale, legacyNuxtContext, i18n, { useCookie, initial: localeSetup });
      if (modified && localeSetup) {
        notInitialSetup = false;
      }
      const redirectPath = detectRedirect(to, app, initialLocale, getLocaleFromRoute, nuxtI18nOptions);
      if (redirectPath) {
        navigate(nuxt.ssrContext, redirectPath);
      }
    }, { global: true });
  } else {
    const routeURL = nuxt.ssrContext.url;
    const locale = detectLocale(routeURL, nuxt.ssrContext, i18n, getLocaleFromRoute, nuxtI18nOptions, localeCodes);
    console.log("detectlocale server return", locale);
    loadAndSetLocale(locale || nuxtI18nOptions.defaultLocale, legacyNuxtContext, i18n, { useCookie });
    const redirectPath = detectRedirect(routeURL, app, initialLocale, getLocaleFromRoute, nuxtI18nOptions);
    if (redirectPath) {
      navigate(nuxt.ssrContext, redirectPath);
    }
  }
});
async function navigate(context, redirectPath, status = 302) {
  if (isClient()) {
    await navigateTo(redirectPath);
  } else {
    context.res.writeHead(status, {
      Location: redirectPath
    });
    context.res.end();
  }
}
