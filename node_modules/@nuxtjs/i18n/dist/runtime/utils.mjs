import { isVue2 } from "vue-demi";
import {
  getLocale,
  setLocale,
  isI18nInstance,
  isComposer,
  isExportedGlobalComposer,
  isVueI18n
} from "vue-i18n-routing";
import { isString } from "@intlify/shared";
import { nuxtI18nInternalOptions, nuxtI18nOptionsDefault } from "#build/i18n.options.mjs";
import { detectBrowserLanguage, getLocaleCookie } from "#build/i18n.internal.mjs";
export function isServer() {
  return typeof process !== "undefined" && process.server;
}
export function isClient() {
  return typeof process !== "undefined" && process.client;
}
export function isStatic() {
  return typeof process !== "undefined" && process.static;
}
export function isLegacyVueI18n(target) {
  return target != null && ("__VUE_I18N_BRIDGE__" in target || "_sync" in target);
}
function callVueI18nInterfaces(i18n, name, ...args) {
  const target = isI18nInstance(i18n) ? i18n.global : i18n;
  const [obj, method] = isComposer(target) ? isVue2 && isLegacyVueI18n(i18n) ? [i18n, i18n[name]] : [target, target[name]] : isExportedGlobalComposer(target) || isVueI18n(target) || isLegacyVueI18n(target) ? [target, target[name]] : [target, target[name]];
  return Reflect.apply(method, obj, [...args]);
}
export function setCookieLocale(i18n, locale) {
  console.log("setCookieLocale", locale);
  return callVueI18nInterfaces(i18n, "setLocaleCookie", locale);
}
function onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, context) {
  return callVueI18nInterfaces(i18n, "onBeforeLanguageSwitch", oldLocale, newLocale, initial, context);
}
function onLanguageSwitched(i18n, oldLocale, newLocale) {
  return callVueI18nInterfaces(i18n, "onLanguageSwitched", oldLocale, newLocale);
}
export function loadAndSetLocale(newLocale, context, i18n, {
  useCookie = nuxtI18nOptionsDefault.detectBrowserLanguage.useCookie,
  initial = false
} = {}) {
  console.log("loadAndSetLocale: useCookie", useCookie);
  console.log("loadAndSetLocale: initial", initial);
  let ret = false;
  if (!newLocale) {
    return ret;
  }
  const oldLocale = getLocale(i18n);
  console.log("loadAndSetLocale: oldLocale", oldLocale);
  console.log("loadAndSetLocale: newLoacal", newLocale);
  if (oldLocale === newLocale) {
    return ret;
  }
  const localeOverride = onBeforeLanguageSwitch(i18n, oldLocale, newLocale, initial, context);
  if (localeOverride && i18n.localeCodes.includes(localeOverride)) {
    if (localeOverride === oldLocale) {
      return ret;
    }
    newLocale = localeOverride;
  }
  if (useCookie) {
    setCookieLocale(i18n, newLocale);
  }
  setLocale(i18n, newLocale);
  onLanguageSwitched(i18n, oldLocale, newLocale);
  ret = true;
  return ret;
}
export function detectLocale(route, context, i18n, routeLocaleGetter, nuxtI18nOptions, localeCodes = []) {
  const { strategy, defaultLocale, vueI18n } = nuxtI18nOptions;
  const initialLocale = getLocale(i18n) || defaultLocale || vueI18n.locale || "en-US";
  const browserLocale = nuxtI18nOptions.detectBrowserLanguage ? detectBrowserLanguage(route, context, nuxtI18nOptions, nuxtI18nInternalOptions, localeCodes, initialLocale) : "";
  console.log("detectLocale strategy:", strategy);
  console.log("detectLocale browserLocale:", browserLocale);
  console.log("detectLocale initialLocale:", initialLocale);
  let finalLocale = browserLocale;
  if (!finalLocale) {
    if (strategy !== "no_prefix") {
      finalLocale = routeLocaleGetter(route);
      console.log("detectLocale routeLocale:", finalLocale);
    }
  }
  if (!finalLocale && nuxtI18nOptions.detectBrowserLanguage && nuxtI18nOptions.detectBrowserLanguage.useCookie) {
    finalLocale = getLocaleCookie(context, { ...nuxtI18nOptions, localeCodes });
    console.log("detectLocale cookieLocale:", finalLocale);
  }
  if (!finalLocale) {
    finalLocale = defaultLocale || "";
  }
  return finalLocale;
}
export function detectRedirect(route, app, targetLocale, routeLocaleGetter, nuxtI18nOptions) {
  const { strategy, defaultLocale } = nuxtI18nOptions;
  console.log("detectRedirect route:", route);
  console.log("detectRedirect strategy:", strategy);
  console.log("detectRedirect targetLocale:", targetLocale);
  console.log("detectRedirect defaultLocale:", defaultLocale);
  let redirectPath = "";
  if (!isStatic() && strategy !== "no_prefix" && (routeLocaleGetter(route) !== targetLocale || strategy === "prefix_and_default" && targetLocale === defaultLocale)) {
    const fullPath = isString(route) ? route : route.fullPath;
    const routePath = app.switchLocalePath(targetLocale) || app.localePath(fullPath, targetLocale);
    console.log("detectRedirect: fullpath -> ", fullPath, ", routePath -> ", routePath);
    if (isString(routePath) && routePath !== fullPath && !routePath.startsWith("//")) {
      redirectPath = routePath;
    }
  }
  console.log("detectRedirect: redirectPath -> ", redirectPath);
  return redirectPath;
}
export function proxyNuxt(context, target) {
  return function() {
    const app = isVue2 ? context.app : context.vueApp;
    return Reflect.apply(target, {
      getRouteBaseName: app.getRouteBaseName,
      i18n: app.i18n,
      localePath: app.localePath,
      localeLocation: app.localeLocation,
      localeRoute: app.localeRoute,
      localeHead: app.localeHead,
      req: isServer() && isVue2 ? context.req : null,
      route: isVue2 ? context.route : context.$router.currentRoute.value,
      router: isVue2 ? app.router : context.$router,
      store: isVue2 ? context.store : void 0
    }, arguments);
  };
}
